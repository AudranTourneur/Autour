Initialiser l'environnement graphique;

Procédure principale {
	Soit TAILLE valant 50;

	Appeler remplir_zero_prochaine_grille;

	Soit grille valant [ 
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],

		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,1,0,0, 0,1,1,1,0, 0,0,0,0,0, 0,0,1,1,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,0,1,1,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
	   	[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
 	   	[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,1,0,1, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
 	   	[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,1,1,0, 0,0,0,0,0, 1,1,0,0,0, 0,0,0,0,0, 1,1,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
 	   	[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,1,0,0,0, 1,0,0,0,0, 1,1,0,0,0, 0,0,0,0,0, 1,1,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
 	   	[0,0,0,0,0,0,0,0,0,0,  0,0,1,1,0, 1,0,0,0,0, 0,1,0,0,0, 1,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
 	   	[0,0,0,0,0,0,0,0,0,0,  0,0,1,1,0, 1,0,0,0,1, 0,1,1,0,0, 0,0,1,0,1, 0,0,0,1,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
 	   	[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0, 0,0,0,0,1, 0,0,0,1,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
 	   	[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
 	   	[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,1,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
 	   	[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
	   	[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,0,1, 1,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,1,1,1, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,1,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,1,1,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0 ,0,0,0,0,0 ,0,0,0,0,0],

		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
		[0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0]
	];

	Appeler afficher_grille;
	Dormir 500;

	Soit generation valant 0;
	Tant que (1 est égal à 1) {
		Soit generation valant generation+1;
		Imprimer "Génération n°" + generation;
		Appeler calculer_prochaine_generation;

		Appeler transferer_grille;

		Appeler afficher_grille;
		Dormir 250;
	};
}

Procédure remplir_zero_prochaine_grille {
	Soit prochaine_grille valant [];
	Pour i allant de 0 à TAILLE {
		prochaine_grille[i] = [];
		Soit sous_tableau valant prochaine_grille[i];
		Pour j allant de 0 à TAILLE {
			sous_tableau[j] = 0;
		};
	};
}

Procédure calculer_prochaine_generation {
	#Appeler reinitialiser_prochaine_grille;
	Appeler remplir_zero_prochaine_grille;

	Pour x allant de 0 à TAILLE {
		Pour y allant de 0 à TAILLE {

			Soit voisins_en_vie valant 0;
			Pour dx allant de -1 à 2 {
				Pour dy allant de -1 à 2 {
					Si (((x+dx) est supérieur ou égal à 0) ET ((x+dx) est inférieur à TAILLE)) {
						Si (((y+dy) est supérieur ou égal à 0) ET ((y+dy) est inférieur à TAILLE)) {
							Soit voisins_en_vie valant voisins_en_vie + grille[x + dx][y + dy]; 	
						};
					};
				};
			};

			Soit voisins_en_vie valant voisins_en_vie - grille[x][y];

			Soit modification valant 0;

			# Mort par sous-population
			Si ((grille[x][y] est égal à 1) ET (voisins_en_vie est inférieur à 2)) {
				Soit sous_tab valant prochaine_grille[x];
				sous_tab[y] = 0;
				Soit modification valant 1;
			};

			# Mort par sur-population
			Si ((grille[x][y] est égal à 1) ET (voisins_en_vie est supérieur à 3)) {
				Soit sous_tab valant prochaine_grille[x];
				sous_tab[y] = 0;
				Soit modification valant 1;
			};

			# Nouvelle cellule 
			Si ((grille[x][y] est égal à 0) ET (voisins_en_vie est égal à 3)) {
				Soit sous_tab valant prochaine_grille[x];
				sous_tab[y] = 1;
				Soit modification valant 1;
			};

			# Aucune modification
			Si (modification est égal à 0) {
				Soit sous_tab valant prochaine_grille[x];
				sous_tab[y] = grille[x][y];
			};

		};
	};
}

Procédure transferer_grille {
	Pour i allant de 0 à TAILLE {
		Soit sous_tableau valant grille[i];
		Pour j allant de 0 à TAILLE {
			sous_tableau[j] = prochaine_grille[i][j];
		};
	};
}

Procédure afficher_arriere_plan {
	Soit centre valant TAILLE/2;

	Pour i allant de 0 à TAILLE {
		Pour j allant de 0 à TAILLE {
			Soit dx valant i-centre;
			Soit dy valant j-centre;
			Soit distance valant racine(dx*dx + dy*dy);
			Soit couleur valant distance*3;
			Colorier le pixel (i, j) avec la couleur (couleur, couleur, couleur);
		};
	};
}

Procédure afficher_grille {
	Appeler afficher_arriere_plan;

	Pour i allant de 0 à TAILLE { 
		Pour j allant de 0 à TAILLE {
			Si (grille[i][j] est égal à 1) {
				Colorier le pixel (i, j) avec la couleur (160, 32, 240);
			};
		};
	};
	Mise à jour graphique;
}